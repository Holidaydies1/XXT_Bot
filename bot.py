from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import os
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω —ñ–∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ---------- Health-check –¥–ª—è Render ----------
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write(b"OK")

def run_server():
    server_address = ('', 10000)
    httpd = HTTPServer(server_address, HealthHandler)
    httpd.serve_forever()

Thread(target=run_server, daemon=True).start()
# ---------------------------------------------

# ---------- –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ----------
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/YourChannelLink"),
        InlineKeyboardButton("üéì –ö—É–ø–∏—Ç–∏ –∫—É—Ä—Å", url="https://yourcoursepaymentlink.com"),
        InlineKeyboardButton("üíé –ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", url="https://yoursubscriptionlink.com")
    )
    return keyboard

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞–ø–∏—Å–∞–≤ /start")
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ **XXT Crypto Hub**!\n\n–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=main_menu(),
        parse_mode="Markdown"
    )

@dp.message_handler()
async def log_messages(message: types.Message):
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞–ø–∏—Å–∞–≤: {message.text}")
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é /start.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
